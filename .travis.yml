language: rust
cache: cargo
dist: trusty
sudo: true

rust:
  # - stable
  # - beta
  - nightly
  - nightly-2019-07-19

matrix:
  allow_failures:
    - rust: nightly
    # - rust: stable
    # - rust: beta

env:
  global:
  - RUSTFLAGS="-C link-dead-code"

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - binutils-dev
      - libiberty-dev
      - g++
      - cmake
      - zlib1g-dev

install:
  # Print rustc and cargo versions
  - rustc -vV
  - cargo -vV
  # Install cargo-kcov Cargo plugin
  - cargo install --force cargo-kcov
  - cargo kcov -vV
  # Install kcov binary
  - wget https://github.com/SimonKagstrom/kcov/archive/v36.tar.gz
  - tar xzf v36.tar.gz
  - pushd kcov-36
  - mkdir build
  - pushd build
  - cmake ..
  - make
  - sudo make install # Puts kcov in the default location usually /usr/local/bin/kcov
  - kcov --version
  - popd
  - popd
  # Export cargo binaries, python and misc settings
  - export PATH=$HOME/.local/bin:$HOME/.cargo/bin:$HOME/Library/Python/2.7/bin:$PATH
  # Print current work directory state as directions.
  - ls -lah

before_script:
  - rustup component add clippy rustfmt
  - rustup target add wasm32-unknown-unknown

script:
- |
  cargo check --verbose --all --all-features
  check_all_features=$?

  cargo check --verbose --all --no-default-features
  check_no_default=$?

  cargo fmt --verbose --all -- --check
  fmt=$?

  cargo clippy --verbose --all --all-features -- -D warnings
  clippy_all_features=$?

  cargo clippy --verbose --all --no-default-features -- -D warnings
  clippy_no_default=$?

  cargo test --verbose --all --all-features
  test=$?

  cargo kcov --verbose --coveralls --all --no-clean-rebuild
  kcov=$?
  bash <(curl -s https://codecov.io/bash)

  cargo build --verbose --all --no-default-features --release --target=wasm32-unknown-unknown
  build_wasm=$?

  echo "CI Summary"
  echo "=========="
  echo ""
  if [ $check_all_features -eq 0 ]
  then
    echo "compile (all-features):        ok"
  else
    echo "compile (all-features):        ERROR"
  fi

  if [ $check_no_default -eq 0 ]
  then
    echo "compile (no-default-features): ok"
  else
    echo "compile (no-default-features): ERROR"
  fi

  if [ $fmt -eq 0 ]
  then
    echo "formatting:                    ok"
  else
    echo "formatting:                    ERROR"
  fi

  if [ $clippy_all_features -eq 0 ]
  then
    echo "clippy (all-features):         ok"
  else
    echo "clippy (all-features):         ERROR"
  fi

  if [ $clippy_no_default -eq 0 ]
  then
    echo "clippy (no-default-features):  ok"
  else
    echo "clippy (no-default-features):  ERROR"
  fi

  if [ $test -eq 0 ]
  then
    echo "test (all-features):           ok"
  else
    echo "test (all-features):           ERROR"
  fi

  if [ $build_wasm -eq 0 ]
  then
    echo "build Wasm:                    ok"
  else
    echo "build Wasm:                    ERROR"
  fi

  if [ $kcov -eq 0 ]
  then
    echo "coverage analysis:             ok"
  else
    echo "coverage analysis:             ERROR"
  fi

  if [ $check_all_features -eq 0 ] && [ $check_no_default -eq 0 ] && [ $fmt -eq 0 ] && [ $clippy_all_features -eq 0 ] && [ $clippy_no_default -eq 0 ] && [ $test -eq 0 ] && [ $build_wasm -eq 0 ]
  then
    echo "All checks have passed!"
    exit 0
  else
    echo "Some checks have not passed!"
    exit 1
  fi
