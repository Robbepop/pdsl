# .gitlab-ci.yml
#
# ink
#
# pipelines can be triggered manually in the web


stages:
  - check-workspace
  - examples

variables:
  GIT_STRATEGY:                    fetch
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  SCCACHE_DIR:                     "/ci-cache/${CI_PROJECT_NAME}/sccache"
  CARGO_INCREMENTAL:               0
  CI_SERVER_NAME:                  "GitLab CI"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/

.docker-env:                       &docker-env
  image:                           ${REGISTRY}/ink-ci-linux:latest
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    # global RUSTFLAGS overrides the linker args so this way is better to pass the flags
    - mkdir -p ${CARGO_HOME}; touch ${CARGO_HOME}/config
    - printf '[build]\nrustflags = ["-C", "link-dead-code"]\n' | tee ${CARGO_HOME}/config
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when: 
      - runner_system_failure
      - unknown_failure
      - api_failure
  tags:
    - linux-docker

#### stage:                        check-workspace

.test-set:                         &test-set
    script:
    # std
    - cargo check --verbose --all-features --release --manifest-path ${CI_JOB_NAME}/Cargo.toml
    - cargo build --verbose --all-features --release --manifest-path ${CI_JOB_NAME}/Cargo.toml
    - cargo test --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features --release
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features -- -D warnings
    # wasm
    - cargo check --verbose --no-default-features --release --target wasm32-unknown-unknown --manifest-path ${CI_JOB_NAME}/Cargo.toml
    - cargo build --verbose --no-default-features --release --target wasm32-unknown-unknown --manifest-path ${CI_JOB_NAME}/Cargo.toml
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features -- -D warnings
    # else
    - cargo fmt --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml -- --check

#   cargo check --verbose --all-features --release --all
#   cargo build --verbose --all-features --release --all
#   cargo test --verbose --all --all-features --release
#   cargo clippy --verbose --all --all-features -- -D warnings
#   cargo fmt --verbose --all -- --check

#   cargo check --verbose --no-default-features --release --target wasm32-unknown-unknown
#   cargo build --verbose --no-default-features --release --target wasm32-unknown-unknown
#   cargo clippy --verbose --all --no-default-features -- -D warnings

# ###
# all_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro" "cli")
# wasm_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro")

# results["check_all_features"]=true
# for crate in "${all_crates[@]}"; do
#     cargo check --verbose --no-default-features --manifest-path $crate/Cargo.toml
# done

check-std:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo check --verbose --all-features --release --all

check-wasm:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - wasm_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro")
    - for crate in "${wasm_crates[@]}"; do
        cargo check --verbose --no-default-features --release --target wasm32-unknown-unknown --manifest-path ${crate}/Cargo.toml;
      done

build-std:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo build --verbose --all-features --release --all

build-wasm:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - wasm_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro")
    - for crate in "${wasm_crates[@]}"; do
        cargo build --verbose --no-default-features --release --target wasm32-unknown-unknown --manifest-path ${crate}/Cargo.toml;
      done

test-std:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo test --verbose --all-features --release --all

clippy-std:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo clippy --verbose --all --all-features -- -D warnings

clippy-wasm:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - wasm_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro")
    - for crate in "${wasm_crates[@]}"; do
        cargo clippy --verbose --manifest-path ${crate}/Cargo.toml --no-default-features -- -D warnings;
      done

fmt:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo fmt --verbose --all -- --check

## my way
core:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

alloc:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

utils:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

lang2:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

abi:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

lang2/macro:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

cli:
  stage:                           check-workspace
  <<:                              *docker-env
  # not built/checked for wasm
  script:
    # std
    - cargo check --verbose --all-features --release --manifest-path ${CI_JOB_NAME}/Cargo.toml
    - cargo build --verbose --all-features --release --manifest-path ${CI_JOB_NAME}/Cargo.toml
    - cargo test --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features --release
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features -- -D warnings
    - cargo fmt --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml -- --check

#### stage:                        examples

examples-test:
  stage:                           examples
  <<:                              *docker-env
  script:
    - for DIR in examples/lang2/*; do 
        cargo test --verbose --manifest-path ${DIR}/Cargo.toml;
      done

examples-fmt:
  stage:                           examples
  <<:                              *docker-env
  script:
    - for DIR in examples/lang2/*; do 
        cargo fmt --verbose --manifest-path ${DIR}/Cargo.toml -- --check;
      done

examples-clippy-all-features:
  stage:                           examples
  <<:                              *docker-env
  script:
    - for DIR in examples/lang2/*; do 
        cargo clippy --verbose --manifest-path ${DIR}/Cargo.toml --all-features -- -D warnings;
      done

examples-clippy-no-default-features:
  stage:                           examples
  <<:                              *docker-env
  script:
    - for DIR in examples/lang2/*; do 
        cargo clippy --verbose --manifest-path ${DIR}/Cargo.toml --no-default-features -- -D warnings;
      done

examples-contract-build:
  stage:                           examples
  <<:                              *docker-env
  script:
    - for DIR in examples/lang2/*; do 
        cd $DIR && pwd && cargo contract build; 
      done

examples-generate-abi:
  stage:                           examples
  <<:                              *docker-env
  script:
    - for DIR in examples/lang2/*; do 
        cd $DIR && pwd && cargo contract generate-abi; 
      done


# my way
.examples-test-set:                &examples-test-set
  script:
    - cargo test --verbose --manifest-path examples/lang2/${CI_JOB_NAME}/Cargo.toml
    - cargo fmt --verbose --manifest-path examples/lang2/${CI_JOB_NAME}/Cargo.toml -- --check
    - cargo clippy --verbose --manifest-path examples/lang2/${CI_JOB_NAME}/Cargo.toml --all-features -- -D warnings
    - cargo clippy --verbose --manifest-path examples/lang2/${CI_JOB_NAME}/Cargo.toml --no-default-features -- -D warnings
    - cd examples/lang2/${CI_JOB_NAME}
    - cargo contract build
    - cargo contract generate-abi

flipper:
  stage:                           examples
  <<:                              *docker-env
  <<:                              *examples-test-set

incrementer:
  stage:                           examples
  <<:                              *docker-env
  <<:                              *examples-test-set

erc20:
  stage:                           examples
  <<:                              *docker-env
  <<:                              *examples-test-set

delegator:
  stage:                           examples
  <<:                              *docker-env
  <<:                              *examples-test-set
