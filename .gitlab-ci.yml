# .gitlab-ci.yml
#
# ink
#
# pipelines can be triggered manually in the web


stages:
  - check
  - workspace
  - examples
  - publish

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  CI_SERVER_NAME:                  "GitLab CI"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts
  ALL_CRATES:                      "core alloc prelude primitives lang lang/macro"

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/

.docker-env:                       &docker-env
  image:                           ${REGISTRY}/ink-ci-linux:latest
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    - mkdir -p ${CARGO_HOME}; touch ${CARGO_HOME}/config
    # global RUSTFLAGS overrides the linker args so this way is better to pass the flags
    - printf '[build]\nrustflags = ["-C", "link-dead-code"]\n' | tee ${CARGO_HOME}/config
    # if there is no directory for this $CI_COMMIT_REF_NAME/$CI_JOB_NAME
    # create such directory and
    # create hardlinks recursively of all the files from the master/$CI_JOB_NAME if it exists
    - if [[ ! -d $CARGO_TARGET_DIR ]]; then
        mkdir -p /ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME};
        cp -al /ci-cache/${CI_PROJECT_NAME}/targets/${CI_DEFAULT_BRANCH}/${CI_JOB_NAME}
          /ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME} ||
          echo "_____No such target dir, proceeding from scratch_____";
      fi
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - branches
  dependencies:                    []
  interruptible:                   true
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  tags:
    - linux-docker

codecov:
  stage:                           check
  <<:                              *docker-env
  variables:
    CARGO_INCREMENTAL:             0
    RUSTFLAGS:                     '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads'
  script:
    - cargo clean; rm -rf $CARGO_TARGET_DIR
    - cargo +nightly test --verbose --all-features --no-fail-fast --release --workspace
    - apt update && apt install -y zip
    - zip -0 ccov.zip `find ${CARGO_TARGET_DIR} \( -iname "*.gc*" \) -print`;
    - grcov ccov.zip -t coveralls+ --llvm --token ${CODECOV_TOKEN} --commit-sha ${CI_COMMIT_SHA} > ccov.json
    # - curl -X POST --data-binary ccov.json "https://codecov.io/upload/v2?commit=${CI_COMMIT_SHORT_SHA}&token=${CODECOV_TOKEN}&build_url=${CI_JOB_URL}&service=gitlab&pr=${CI_COMMIT_REF_NAME}"
    # - bash <(curl https://codecov.io/bash) -t ${CODECOV_TOKEN} -f file -s ccov_reports 
    # - grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" > lcov.info
    - bash <(curl -s https://codecov.io/bash) -t ${CODECOV_TOKEN} -X gcov -f ccov.json

test:
  stage:                           check
  <<:                              *docker-env
  needs:
    - check-std
  script:
    # - for crate in ${ALL_CRATES}; do
    #     cargo test --verbose --all-features --release --manifest-path ${crate}/Cargo.toml;
    #   done
    - cargo test --verbose --all-features --release --workspace