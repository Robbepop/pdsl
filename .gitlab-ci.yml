# .gitlab-ci.yml
#
# ink
#
# pipelines can be triggered manually in the web


stages:
  - check-workspace
  - examples

variables:
  GIT_STRATEGY:                    fetch
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  SCCACHE_DIR:                     "/ci-cache/${CI_PROJECT_NAME}/sccache"
  CARGO_INCREMENTAL:               0
  CI_SERVER_NAME:                  "GitLab CI"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/

.docker-env:                       &docker-env
  image:                           ${REGISTRY}/ink-ci-linux:latest
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    # global RUSTFLAGS overrides the linker args so this way is better to pass the flags
    - printf '[build]\nrustflags = ["-C", "link-dead-code"]\n' | tee ${CARGO_HOME}/config
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when: 
      - runner_system_failure
      - unknown_failure
      - api_failure
  tags:
    - linux-docker

#### stage:                        check-workspace

# cargo-check-af:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo check --verbose --all --all-features

# all_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro" "cli")
# wasm_crates=("core" "alloc" "utils" "model" "lang" "lang2" "lang2/macro")

# results["check_all_features"]=true
# for crate in "${all_crates[@]}"; do
#     cargo check --verbose --all-features --manifest-path $crate/Cargo.toml
#     let "results['check_all_features'] |= $?"
#     cargo check --verbose --no-default-features --manifest-path $crate/Cargo.toml
#     let "results['check_no_defaults'] |= $?"
# done

check-af-core:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo check --verbose --all-features --manifest-path core/Cargo.toml
    - cargo check --verbose --no-default-features --manifest-path core/Cargo.toml
    - cargo build --verbose --manifest-path core/Cargo.toml --no-default-features --release --target=wasm32-unknown-unknown

check-af-core:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo check --verbose --all-features --manifest-path core/Cargo.toml

check-nf-core:
  stage:                           check-workspace
  <<:                              *docker-env
  script:
    - cargo check --verbose --no-default-features --manifest-path core/Cargo.toml

build-core:
  stage:                           examples
  <<:                              *docker-env
  script:
    - cargo build --verbose --manifest-path core/Cargo.toml --no-default-features --release --target=wasm32-unknown-unknown


# cargo-check-nf:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo check --verbose --all --no-default-features

# cargo-fmt:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo fmt --verbose --all -- --check

# cargo-clippy-af:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo clippy --verbose --all --all-features -- -D warnings

# cargo-clippy-nf:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo clippy --verbose --all --no-default-features -- -D warnings

# cargo-test-af:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo test --verbose --all --all-features

# cargo-build-nf:
#   stage:                           check-workspace
#   <<:                              *docker-env
#   script:
#   - cargo build --verbose --all --no-default-features --release --target=wasm32-unknown-unknown

# #### stage:                        examples

# examples-wasm:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in $(ls examples/lang); do
#         cargo build --release --no-default-features --target=wasm32-unknown-unknown --verbose --manifest-path examples/lang/$example/Cargo.toml;
#       done
#     - sccache -s

# examples-test:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in $(ls examples/lang); do
#         cargo test --verbose --manifest-path examples/lang/$example/Cargo.toml;
#       done
#     - sccache -s

# examples-abi:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in $(ls examples/lang); do
#         cargo run --package abi-gen --manifest-path examples/lang/$example/Cargo.toml;
#       done
#     - sccache -s
