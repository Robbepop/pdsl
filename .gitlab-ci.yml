# .gitlab-ci.yml
#
# ink
#
# pipelines can be triggered manually in the web


stages:
  - check-workspace
  - examples

variables:
  GIT_STRATEGY:                    fetch
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  SCCACHE_DIR:                     "/ci-cache/${CI_PROJECT_NAME}/sccache"
  CARGO_INCREMENTAL:               0
  CI_SERVER_NAME:                  "GitLab CI"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/

.docker-env:                       &docker-env
  image:                           ${REGISTRY}/ink-ci-linux:latest
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    # global RUSTFLAGS overrides the linker args so this way is better to pass the flags
    - mkdir -p ${CARGO_HOME}; touch ${CARGO_HOME}/config
    - printf '[build]\nrustflags = ["-C", "link-dead-code"]\n' | tee ${CARGO_HOME}/config
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  retry:
    max: 2
    when: 
      - runner_system_failure
      - unknown_failure
      - api_failure
  tags:
    - linux-docker

#### stage:                        check-workspace

.test-set:                         &test-set
    script:
    - cargo build --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features --release --target=wasm32-unknown-unknown
    - cargo test --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features --release
    - cargo check --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features -- -D warnings
    - cargo build --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features --release --target=wasm32-unknown-unknown
    - cargo check --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features -- -D warnings
    - cargo fmt --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml -- --check

core:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

alloc:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

utils:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

lang2:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

lang2/macro:
  stage:                           check-workspace
  <<:                              *docker-env
  <<:                              *test-set

cli:
  stage:                           check-workspace
  <<:                              *docker-env
  # the difference in script is it's not built for wasm32 target
  script:
    - cargo build --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features --release
    - cargo test --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features --release
    - cargo check --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --all-features -- -D warnings
    - cargo build --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features --release
    - cargo check --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features
    - cargo clippy --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml --no-default-features -- -D warnings
    - cargo fmt --verbose --manifest-path ${CI_JOB_NAME}/Cargo.toml -- --check

#### stage:                        examples

# cargo contract build
# cargo test
# cargo contract generate-abi

# examples-wasm:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in $(ls examples/lang2); do
#         cargo build --release --no-default-features --target=wasm32-unknown-unknown --verbose --manifest-path examples/lang/$example/Cargo.toml;
#       done
#     - sccache -s

# examples-test:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in $(ls examples/lang2); do
#         cargo test --verbose --manifest-path examples/lang/$example/Cargo.toml;
#       done
#     - sccache -s

# examples-abi:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in $(ls examples/lang2); do
#         cargo run --package abi-gen --manifest-path examples/lang/$example/Cargo.toml;
#       done
#     - sccache -s
